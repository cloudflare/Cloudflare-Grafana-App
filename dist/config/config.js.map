{"version":3,"sources":["../../src/config/config.js"],"names":["configTemplate","_","CloudflareConfigCtrl","$scope","$injector","backendSrv","appEditCtrl","setPreUpdateHook","preUpdate","bind","setPostUpdateHook","postUpdate","appModel","jsonData","secureJsonData","baseUrl","bearerSet","apiValidated","apiError","hasSecret","tokenSet","enabled","validateApiConnection","then","is_updated","update","bearer","token","initDatasource","Promise","resolve","importDashboards","self","promise","get","resp","promises","accounts","accountList","result","clusters","forEach","push","name","e","id","c","account","all","previous","map","x","sort","next","isEqual","email","results","exists","some","ds","post","type","access","template"],"mappings":"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","file":"config.js","sourcesContent":["import configTemplate from './config.html!text';\n\nimport _ from 'lodash' ;\n\nclass CloudflareConfigCtrl {\n  constructor($scope, $injector, backendSrv) {\n    this.backendSrv = backendSrv;\n\n    this.appEditCtrl.setPreUpdateHook(this.preUpdate.bind(this));\n    this.appEditCtrl.setPostUpdateHook(this.postUpdate.bind(this));\n\n    if (!this.appModel.jsonData) {\n      this.appModel.jsonData = {};\n    }\n    if (!this.appModel.secureJsonData) {\n      this.appModel.secureJsonData = {};\n    }\n\n    this.baseUrl = 'api/plugin-proxy/cloudflare-app';\n    if (this.appModel.jsonData.bearerSet) {\n      this.baseUrl += '/with-token';\n    } else {\n      this.baseUrl += '/with-key';\n    }\n    this.baseUrl += '/api/v4';\n\n    this.apiValidated = false;\n    this.apiError = false;\n\n    var hasSecret = this.appModel.jsonData.bearerSet || this.appModel.jsonData.tokenSet;\n\n    if (this.appModel.enabled && hasSecret) {\n      this.validateApiConnection().then((is_updated) => {\n        if (is_updated) {\n          this.appEditCtrl.update();\n        }\n      });\n    }\n  }\n\n  preUpdate() {\n    if (this.appModel.secureJsonData.bearer) {\n      this.appModel.jsonData.bearerSet = true;\n    }\n\n    if (this.appModel.secureJsonData.token) {\n      this.appModel.jsonData.tokenSet = true;\n    }\n\n    return this.initDatasource();\n  }\n\n  postUpdate() {\n    if (!this.appModel.enabled) {\n      return Promise.resolve();\n    }\n\n    return this.appEditCtrl.importDashboards();\n  }\n\n  /* Make sure that we can hit the Cloudflare API. */\n  validateApiConnection() {\n    var self = this;\n    let is_updated = false;\n    var promise = this.backendSrv.get(this.baseUrl + '/accounts');\n    return promise.then((resp) => {\n      self.apiValidated = true;\n      /* Update accounts list */\n      let promises = [];\n      let accounts = [];\n      let accountList = resp.result || [];\n      let clusters = [];\n      accountList.forEach(e => {\n        accounts.push({name: e.name, id: e.id});\n        /* Update list of clusters */\n        promises.push(self.backendSrv.get(\n          self.baseUrl + '/accounts/' + e.id + '/dns_firewall').then(resp => {\n            resp.result.forEach(c => {\n              c.account = e.id;\n              clusters.push({id: c.id, account: c.account, name: c.name});\n            });\n        }));\n      });\n      self.appModel.jsonData.accounts = accounts;\n      return Promise.all(promises).then(() => {\n        var previous = self.appModel.jsonData.clusters || [];\n        previous = previous.map(x => { return x.id }).sort();\n        var next = clusters.map(x => { return x.id }).sort();\n        is_updated = !_.isEqual(previous, next);\n        self.appModel.jsonData.clusters = clusters;\n      })\n    }, () => {\n      self.apiValidated = false;\n      self.apiError = true;\n      return [];\n    }).then(() => {\n      return Promise.resolve(is_updated);\n    });\n  }\n\n  reset() {\n    this.appModel.jsonData.clusters = [];\n    this.appModel.jsonData.accounts = [];\n    this.appModel.jsonData.email = '';\n    this.appModel.jsonData.bearerSet = false;\n    this.appModel.jsonData.tokenSet = false;\n    this.appModel.secureJsonData = {};\n    this.apiValidated = false;\n  }\n\n  initDatasource() {\n    /* Check for existing datasource, or create a new one */\n    var self = this;\n    return self.backendSrv.get('api/datasources').then(function(results) {\n      var exists = results.some((ds) => {\n        return ds.name === \"cloudflare\";\n      });\n      if (exists) {\n        return Promise.resolve();\n      }\n      /* Create a new datasource */\n      return self.backendSrv.post('api/datasources', {\n          name: 'cloudflare',\n          type: 'cloudflare-api',\n          access: 'direct',\n          jsonData: {},\n      });\n    });\n  }\n}\n\nCloudflareConfigCtrl.template = configTemplate;\n\nexport {\n  CloudflareConfigCtrl as ConfigCtrl\n};\n"]}