{"version":3,"sources":["../../src/datasource/cfapi.js"],"names":["getUTCTimestamp","ts","Date","getTime","getTimezoneOffset","getHash","queryObj","query","_","cloneDeep","since","until","JSON","stringify","getMaxRefreshInterval","interval","parse","moment","duration","metricList","dimensionList","angular","CloudflareProxy","backendSrv","baseUrl","tags","cache","cacheUpdateInterval","requestCachingIntervals","config","Promise","resolve","self","get","then","resp","jsonData","cached_query","hash","notCached","api","timestamp","result","query_range","cache_since","cache_until","cached_query_range","max_refresh_interval","Math","abs","scope","tag","split","tagRegex","match","key","from","cached","path","_get","name","data","success","forEach","e","id","fetchConfig","bearerSet","accounts","params","status","per_page","zones","push","text","value","clusters","map","account","options","metrics","join","range","utc","toISOString","to","formatFilters","filters","dimensions","out","i","op","operator","cond","condition","length","endpoint","bytime","formatQuery","url","console","log","fetchAuthEndpoint","datasourceRequest","method","module","service"],"mappings":"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","file":"cfapi.js","sourcesContent":["import {metricList, dimensionList} from './metric_def';\n\nimport angular from 'angular';\nimport _ from 'lodash';\nimport moment from 'moment';\n\n// Get UTC timestamp\nfunction getUTCTimestamp() {\n  let ts = new Date();\n  return ts.getTime() + ts.getTimezoneOffset() * 60 * 1000;\n}\n\n// Get hash of the query\nfunction getHash(queryObj) {\n  let query = _.cloneDeep(queryObj);\n  query.since = null;\n  query.until = null;\n  return JSON.stringify(query);\n}\n\n// Prevent too frequent queries\nfunction getMaxRefreshInterval(query) {\n  let interval = Date.parse(query.until) - Date.parse(query.since);\n  if (interval > moment.duration(1, 'months')) {\n    return 60 * 60 * 1000; // 1 hour\n  } else if (interval > moment.duration(1, 'day')) {\n    return 15 * 60 * 1000; // 15 min\n  } else {\n    return 5 * 60 * 1000; // 5 min\n  }\n}\n\nclass CloudflareProxy {\n  constructor(backendSrv) {\n    this.backendSrv = backendSrv;\n    this.baseUrl = 'api/plugin-proxy/cloudflare-app';\n    this.tags = {};\n    this.cache = {};\n    this.cacheUpdateInterval = 5 * 60 * 1000; // 5 min by default\n    this.requestCachingIntervals = {\n      '1d': 0\n    };\n  }\n\n  fetchConfig() {\n    if (this.config) {\n      return Promise.resolve(this.config);\n    }\n    var self = this;\n    /* Resolve accounts for this datasource */\n    return this.backendSrv.get('api/plugins/cloudflare-app/settings').then(resp => {\n      self.config = resp.jsonData;\n      return self.config;\n    }, () => {\n      self.config = {};\n      return self.config;\n    });\n  }\n\n  fetchData(query) {\n    let cached_query = _.cloneDeep(query);\n    let hash = getHash(cached_query);\n\n    if (this.notCached(query)) {\n      return this.api(query).then(result => {\n        let timestamp = getUTCTimestamp();\n        this.cache[hash] = {\n          timestamp: timestamp,\n          query: cached_query,\n          result: result\n        };\n        return result;\n      });\n    } else {\n      return Promise.resolve(this.cache[hash].result);\n    }\n  }\n\n  notCached(query) {\n    let hash = getHash(query);\n    let timestamp = getUTCTimestamp();\n    let since = Date.parse(query.since);\n    let until = Date.parse(query.until);\n    let query_range = until - since;\n    let cache_since = this.cache[hash] ? Date.parse(this.cache[hash].query.since) : null;\n    let cache_until = this.cache[hash] ? Date.parse(this.cache[hash].query.until) : null;\n    let cached_query_range = cache_until - cache_since;\n    let max_refresh_interval = getMaxRefreshInterval(query);\n\n    return (\n      !this.cache[hash] ||\n      timestamp - until > max_refresh_interval ||\n      (this.cache[hash] && (\n        timestamp - cache_until > max_refresh_interval ||\n        since < cache_since ||\n        Math.abs(query_range - cached_query_range) > 60 * 1000 // is time range changed?\n        ))\n      );\n  }\n\n  fetchTag(query) {\n    /* Break tag and scope */\n    let scope = query.tag.split('/', 2);\n    let tag = scope[0];\n    scope = scope[1];\n    /* Resolve tag if symbolic */\n    let tagRegex = /[a-z0-9]{32}/g;\n    if (tag.match(tagRegex)) {\n      return Promise.resolve(query.tag);\n    }\n    /* Check tag cache */\n    let key = '#' + query.from + ':' + query.tag;\n    let cached = this.tags[key];\n    if (cached) {\n      query.tag = cached;\n      return Promise.resolve(cached);\n    }\n    let path = 'zones';\n    if (query.from == 'dnsfw') {\n      path = 'accounts/' + scope + '/dns_firewall'\n    }\n    /* Resolve the tag name to ID */\n    return this._get('/api/v4/'+path, {name: tag}).then(resp => {\n      let data = resp.data;\n      if (!data || !data.success) {\n        return '';\n      }\n      data.result.forEach(e => {\n        if (e.name == tag) {\n          let id = e.id;\n          if (scope) {\n            id = id + '/' + scope;\n          }\n          this.tags[key] = id;\n          /* Replace query tag and return */\n          query.tag = id;\n          return id;\n        }\n      });\n    });\n  }\n\n  fetchAuthEndpoint() {\n    return this.fetchConfig().then(() => {\n      if (this.config.bearerSet) {\n        return \"/with-token\";\n      }\n      return \"/with-key\";\n    });\n  }\n\n  fetchAccounts() {\n    return this.fetchConfig().then(() => {\n      if (!this.config.accounts) {\n        return [];\n      }\n      return this.config.accounts;\n    });\n  }\n\n  fetchZones() {\n    /* Default parameters */\n    let params = {\n      status: 'active',\n      per_page: 50\n    }\n    /* Get list of zones */\n    return this._get('/api/v4/zones', params).then(resp => {\n      let data = resp['data'];\n      if (!data || !data.success) {\n        return [];\n      }\n      /* Gather list of active zones */\n      let zones = [];\n      data.result.forEach(e => {\n        zones.push({text: e.name, value: e.id});\n      });\n      return zones;\n    });\n  }\n\n  fetchClusters() {\n    return this.fetchConfig().then(() => {\n      if (!this.config.clusters) {\n        return [];\n      }\n      return this.config.clusters.map(e => {\n        /* Glue account ID to cluster ID so that metric fetching code knows\n         * which account ID to use in API queries. */\n        let id = e.id + '/' + e.account;\n        return {text: e.name, value: id};\n      });\n    });\n  }\n\n  formatQuery(options) {\n    let query = {\n      \"metrics\": options.metrics.join(','),\n      \"since\": options.range.from.utc().toISOString().split('.')[0]+'Z',\n      \"until\": options.range.to.utc().toISOString().split('.')[0]+'Z',\n      \"filters\": this.formatFilters(options.filters)\n    };\n    if (options.dimensions) {\n      query.dimensions = options.dimensions;\n    }\n\n    return query;\n  }\n\n  formatFilters(filters) {\n    let out = [];\n    filters.forEach((e, i) => {\n      let op = e.operator;\n      /* Convert equality operator */\n      if (op == '=') {\n        op = '==';\n      }\n      out.push(e.key + op + e.value);\n      /* Add condition if chaining */\n      let cond = e.condition || 'AND';\n      if (i < filters.length - 1) {\n        out.push(cond);\n      }\n    });\n    return out.join(' ');\n  }\n\n  api(query) {\n    let endpoint = '/dns_analytics/report';\n    if (query.bytime) {\n      endpoint = endpoint + '/bytime';\n    }\n    let params = this.formatQuery(query);\n    let scope = query.tag.split('/', 2);\n    let tag = scope[0];\n    /* Add endpoint prefix */\n    if (scope[1]) {\n      scope = '/api/v4/accounts/' + scope[1];\n    } else {\n      scope = '/api/v4/zones'\n    }\n    /* Select either zone or cluster */\n    if (query.from == 'dnsfw') {\n      return this._get(scope + '/dns_firewall/' + tag + endpoint, params);\n    }\n    return this._get(scope + '/' + tag + endpoint, params);\n  }\n\n  _get(url, data) {\n    console.log()\n    return this.fetchAuthEndpoint().then((endpoint) => {\n      return this.backendSrv.datasourceRequest({\n        method: 'GET',\n        url: this.baseUrl + endpoint + url,\n        params: data\n      });\n    });\n  }\n}\n\nangular\n.module('grafana.services')\n.service('proxySrv', CloudflareProxy);\n"]}